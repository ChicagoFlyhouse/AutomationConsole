<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.7">
  <POU Name="MAIN" Id="{64add26d-f2ba-403c-b7f9-ac72076a8e37}" SpecialFunc="None">
    <Declaration><![CDATA[ PROGRAM MAIN
VAR_INPUT PERSISTENT
	Kid : ARRAY [1..6] OF EtherCAT_Kid;

END_VAR

VAR_INPUT
	JoyStickData AT %I* : DINT;
	JoyStickReading : DINT;
	ck : int;
	tcRestart : PLC_Reset;
		NumKids : INT := 4;
	GlobalEstopActive : BOOL;
	GlobalEstopCode : INT;
	GlobalEstopReason : STRING(255);
	JoyStickEstopActive : BOOL;
	StartHome1 : BOOL;
	Homing_Active : BOOL;
	StartHome2 : BOOL;
		xtar : DINT;
	ytar : DINT;
		JoyStick1DeadMan : BOOL;
	JoyStick2DeadMan : BOOL;
	jsResetter : BOOL;
	onUpLimit : BOOL;
	onDownLimit : BOOL;
END_VAR
VAR
	maxError : INT;
	ProcStart : NT_StartProcess;
	fbUpsPulse: FB_Pulse;

		MaxTimeOut_Reset : BOOL;
	fbWritePersistentData: FB_WritePersistentData;
		
	GantryCollision : BOOL;

	Mom_Estop_State : BOOL;
	TimeOutCheck : TIME;
	MaxTimeOut : Time;
	
	i: DINT;
	Initialized : BOOL := FALSE;
	Serial1 : FB_SerialCom_Remote;
	Serial2 : FB_SerialCom_Kiosk;

	InterOpTimer : TON;
	TimeOutSwitch : BOOL;
	InterOpTimeout : BOOL;
	Execute : BOOL := true;
	GlobalReset : BOOL;
	ResetCount : INT;



	IN: INT;

	//HMIUpdate : HMIUpdate;
	//SerialRemoteFar : FB_SerialCom_Remote;
	//SerialRemoteNear : FB_SerialCom_Remote;
	
	//JS1 : JoyStickGantryLogic;
	//JS2 : JoystickGantryLogic;
	checker : DINT;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[//1/17/2018  11:00AM

IF main.JoyStickEstopActive THEN main.GlobalEstopActive := TRUE;END_IF
IF NOT Initialized THEN
	//ProcStart(PathStr:='C:\users\administrator\desktop\setup.exe', dirname := 'C:\users\administrator\desktop', Start := TRUE);
	FOR i := 1 TO NumKids DO		
		MAIN.Kid[i].Checkin.KidID := DINT_TO_INT(i);	
		MAIN.Kid[i].AxisID := DINT_TO_INT(i); 
		KID[I].targetpos_FromMom_Raw := KID[I].HomedPosition_toMom;
		KID[i].leaveEnabled := FALSE;
	END_FOR 	
	Initialized := TRUE;
	RETURN;
END_IF


//HMIUpdate();

InterOpTimer(IN:= TimeOutSwitch, PT:= T#1000S, Q=> InterOpTimeout, ET=> TimeOutCheck);

if MaxTimeOut_Reset then MaxTimeOut := T#0s; MaxTimeOut_Reset := FALSE; END_IF
//IF TimeOutCheck > MaxTimeOut THEN MaxTimeout := TimeOutCheck; END_IF

IF NOT TimeOutSwitch THEN TimeOutSwitch := NOT InterOpTimeout OR NOT TimeOutSwitch; END_IF
IF InterOpTimeOut THEN GlobalEstopActive := TRUE; GlobalEstopReason := 'INTEROPTIMEOUT'; END_IF


Joystick1Deadman := Joystick1Deadman AND NOT InterOpTimeout;




FOR i := 1 TO NumKids DO
	//MAIN.Kid[i].targetpos_FromMom_Raw := MAIN.Kid[1].HomedPosition_toMom;
		MAIN.Kid[i].CheckIn();
	IF JoyStickData > 98304 AND JoyStickData <> 10000 THEN 
		
		MAIN.Kid[i].RMT_DeadManPressed := TRUE; 
	ELSIF JoyStickData <> 10000 THEN
		MAIN.Kid[i].RMT_DeadManPressed := FALSE;
	END_IF
	
	IF JoyStickData > 98304 THEN 
			
			JoyStickReading := (JoyStickData -98304 - 10000);
			MAIN.Kid[1].modeVel_FromMom_Raw := ABS((JoyStickReading * 1500)/10000);
			MAIN.Kid[1].modeAccel_FromMom_Raw := 3 * (((ABS(JoyStickReading) * 1200)/10000) +20);
			MAIN.Kid[1].modeDecel_FromMom_Raw := 3 * 1200;
			MAIN.Kid[1].targetpos_FromMom_Raw := MAIN.Kid[1].HomedPosition_toMom + JoyStickReading/20;	
	END_IF
		
	IF MAIN.Kid[i].modeAccel_FromMom_Raw < 10 THEN Kid[i].modeAccel_FromMom_Raw := 10; END_IF 
	//IF globalestopactive THEN kid[i].targetpos_FromMom_Raw := kid[i].HomedPosition_toMom; END_IF
	IF GVL_HMI.GUIGlobalReset THEN GlobalReset := TRUE; GVL_HMI.GUIGlobalReset := FALSE; END_IF
	IF GlobalReset THEN
		MAIN.Kid[i].resetCOM := TRUE;
		MAIN.Kid[i].SafteyReset := TRUE;
		MAIN.Kid[i].bComTimeOutError := FALSE;
		Kid[i].RMT_EstopActivate :=Mom_Estop_State;
		InterOpTimeOut := FALSE;
		timeoutSwitch := FALSE;
		GlobalEstopActive := false;
		GlobalEstopCode := 0;
		joystickEstopActive := False;
	END_IF
	
	IF Execute THEN
		MAIN.Kid[i].CheckIn.momControl := TRUE;
		//IF(TimeOutCheck > T#500S ) THEN   //this is the maximum allowed timeout when a deadman is pressed
		//	MAIN.Kid[i].RMT_DeadManPressed := FALSE;
		//END_IF
	ELSE
		MAIN.Kid[i].CheckIn.momControl := FALSE;
		MAIN.Kid[i].RMT_DeadManPressed := FALSE;
	END_IF
	

END_FOR 

IF GlobalReset AND NOT 
((Kid[1].CheckIn.momControl_FromKid AND(MAIN.Kid[1].Checkin.SafteyTripped  OR kid[1].checkin.CommError_FromKid)) OR 
 (Kid[2].CheckIn.momControl_FromKid AND (Kid[2].Checkin.SafteyTripped OR kid[2].checkin.CommError_FromKid)) OR
(Kid[3].CheckIn.momControl_FromKid AND(Kid[3].Checkin.SafteyTripped OR kid[3].checkin.CommError_FromKid)) OR
(Kid[4].CheckIn.momControl_FromKid AND(Kid[4].Checkin.SafteyTripped OR kid[4].checkin.CommError_FromKid)) OR
//(Kid[5].CheckIn.momControl_FromKid AND(Kid[5].Checkin.SafteyTripped OR kid[5].checkin.CommError_FromKid)) OR
//(Kid[6].CheckIn.momControl_FromKid AND(Kid[6].Checkin.SafteyTripped OR kid[6].checkin.CommError_FromKid)) OR
						GlobalEstopActive)  THEN
	GlobalReset:= FALSE;
	ResetCount := 0;
ELSIF GlobalReset THEN
	GlobalEstopActive := FALSE;
	ResetCount := ResetCount + 1;
	IF ResetCount > 300 THEN GlobalReset := FALSE; ResetCount := 0; END_IF
END_IF



//JS1(HookX := kid[1], HookY := Kid[2], sm := SerialRemoteFar); js1.Patient[1] := GVL_HMI.Patient1; js1.Patient[2] := GVL_HMI.Patient2; js1.Patient[3] := GVL_HMI.Patient3; js1.Patient[4] := GVL_HMI.Patient4;
//JS2(HookX := kid[3], HookY := Kid[4], sm := SerialRemoteNear); js2.Patient[1] := GVL_HMI.Patient1; js2.Patient[2] := GVL_HMI.Patient2; js2.Patient[3] := GVL_HMI.Patient3; js2.Patient[4] := GVL_HMI.Patient4;

checker := checker + 1;

i :=  Kid[1].HomedPosition_toMom; i := Kid[1].targetpos_FromMom_Raw; i := Kid[1].ScalingNumber; i := Kid[1].modeAccel_FromMom_RAW; i := Kid[1].modeVel_FromMom_RAW; i := Kid[1].ModeDecel_FromMom_RAW;
i :=  Kid[2].HomedPosition_toMom;  i := Kid[2].targetpos_FromMom_Raw;i := Kid[2].ScalingNumber; i := Kid[2].modeAccel_FromMom_RAW; i := Kid[2].modeVel_FromMom_RAW; i := Kid[2].ModeDecel_FromMom_RAW;
i :=  Kid[3].HomedPosition_toMom;  i := Kid[3].targetpos_FromMom_Raw;i := Kid[3].ScalingNumber; i := Kid[3].modeAccel_FromMom_RAW; i := Kid[2].modeVel_FromMom_RAW; i := Kid[3].ModeDecel_FromMom_RAW;
i :=  Kid[4].HomedPosition_toMom; i := Kid[4].targetpos_FromMom_Raw;  i := Kid[4].ScalingNumber; i := Kid[4].modeAccel_FromMom_RAW; i := Kid[2].modeVel_FromMom_RAW; i := Kid[3].ModeDecel_FromMom_RAW;


i := MAIN.Kid[1].UpdateWord_toMom; i := MAIN.Kid[2].UpdateWord_toMom; i := MAIN.Kid[3].UpdateWord_toMom; i := MAIN.Kid[4].UpdateWord_toMom;


WriteEtherCAT();

fbUpsPulse(bEnable:= TRUE, tTimeOn:= T#100MS, tTimeOff:= T#30S, bPulse=> );


	in := in + 1;
	
	i := 2;
	ck :=DINT_TO_INT(Kid[1].targetpos_FromMom_Raw );
IF MAIN.Kid[1].targetpos_FromMom_Raw < 0 THEN  MAIN.Kid[1].targetpos_FromMom_Raw := 0; END_IF
IF MAIN.Kid[1].targetpos_FromMom_Raw > 7420 THEN  MAIN.Kid[1].targetpos_FromMom_Raw := 7420; END_IF
		onDownLimit := FALSE;
		onUpLimit := FALSE;
	FOR i := 1 TO NumKids DO
		IF(kid[i].checkin.CommError_FromKid ) THEN GlobalEstopActive := TRUE; END_IF
		IF(main.Kid[i].modeVel_FromMom_Raw > 1000) THEN main.Kid[i].modeVel_FromMom_Raw := 1000;		END_IF
		IF(main.Kid[i].modeAccel_FromMom_Raw > 900) THEN main.Kid[i].modeAccel_FromMom_Raw := 900; END_IF
		if(main.Kid[i].modeDecel_FromMom_Raw > 3000) then main.Kid[i].ModeDecel_FromMom_Raw := 3000; END_IF
		IF ABS(MAIN.Kid[i].HomedPosition_toMom - MAIN.Kid[1].HomedPosition_toMom) > maxError THEN maxError := DINT_TO_INT(ABS(MAIN.Kid[i].HomedPosition_toMom - MAIN.Kid[1].HomedPosition_toMom)); END_IF
	
		IF ABS(MAIN.Kid[i].HomedPosition_toMom - MAIN.Kid[1].HomedPosition_toMom) > 200 THEN GlobalEstopActive := True; END_IF

	MAIN.Kid[i].targetpos_FromMom_Raw := MAIN.Kid[1].targetpos_FromMom_Raw;
		MAIN.Kid[i].modeVel_FromMom_Raw := MAIN.Kid[1].modeVel_FromMom_Raw + (50 * ABS((MAIN.Kid[i].HomedPosition_toMom - MAIN.Kid[1].HomedPosition_toMom)) MOD 50);
		MAIN.Kid[i].modeAccel_FromMom_Raw := MAIN.Kid[1].modeAccel_FromMom_Raw + (50 * ABS((MAIN.Kid[i].HomedPosition_toMom - MAIN.Kid[1].HomedPosition_toMom)) MOD 50);
		MAIN.Kid[i].modeDecel_FromMom_Raw := MAIN.Kid[1].modeDecel_FromMom_Raw + (50 * (  MAIN.Kid[1].HomedPosition_toMom-MAIN.Kid[i].HomedPosition_toMom) MOD 50);
		MAIN.Kid[i].ScalingNumber := MAIN.Kid[1].ScalingNumber;
		MAIN.Kid[i].RMT_DeadManPressed := MAIN.Kid[1].RMT_DeadManPressed;

		IF(MAIN.Kid[i].IsHardDownLimitReached> 0 AND MAIN.Kid[i].targetpos_FromMom_Raw < MAIN.Kid[i].homedPosition_ToMom) THEN onDownLimit := TRUE; END_IF
		IF(MAIN.Kid[i].IsHardUpLimitReached > 0 AND MAIN.Kid[i].targetpos_FromMom_Raw > MAIN.Kid[i].homedPosition_ToMom) THEN onUpLimit := TRUE; END_IF
	END_FOR
	
	
	FOR i := 1 TO NumKids DO
		IF onUpLimit or OnDownLimit THEN 
		   MAIN.Kid[i].RMT_DeadManPressed := FALSE;
 // MAIN.GlobalEstopActive := TRUE;
		END_IF
	END_FOR
	
	IF JoyStickData = 10000 AND NOT jsResetter  THEN jsResetter :=TRUE; GlobalEstopActive := TRUE; jsResetter := TRUE; END_IF
	IF jsResetter AND JoyStickData <> 10000 THEN GlobalReset := TRUE; jsResetter := FALSE; END_IF
	//IF TimeOutCheck > T#60S THEN
	//	tcRestart(RESET := TRUE);
	//END_IF]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3657" Count="105" />
      <LineId Id="3765" Count="2" />
      <LineId Id="3773" Count="15" />
      <LineId Id="4031" Count="0" />
      <LineId Id="3789" Count="1" />
      <LineId Id="3894" Count="1" />
      <LineId Id="3963" Count="1" />
      <LineId Id="3791" Count="0" />
      <LineId Id="3962" Count="0" />
      <LineId Id="3792" Count="21" />
      <LineId Id="1869" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>