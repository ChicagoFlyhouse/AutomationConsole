<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.3">
  <POU Name="P_SerialRemote" Id="{49f3ad8c-d228-428b-b0ef-e9d72289f6e6}" SpecialFunc="None">
    <Declaration><![CDATA[(*
SerialCom_InfoSys_Sample1 (v2.0)
This sample sends and receives a string via serial communication.
Hardware interface used: EL terminal
*)
PROGRAM P_SerialRemote
VAR
	fbEL600x	: FB_SerialCom;
	sMyString: STRING;
	

	sMyStringSend: STRING  := '1';

	bStartTimer: BOOL;
	nLEDSend: INT;
	btest: BOOL;
	fbTOF: TOF;
	fbTON: Ton;
	fbTONZon: Ton;
	fbTONHeartbeatON: Ton;
	fbTONHeartbeatOFF: Ton;
	bLastCount: BOOL;
	unStringSize: UINT;
	sStringDecipher : STRING;
	fbTOFDevOn: TOF;
	i: INT;
	sSerialStringList: ARRAY[1..20] OF STRING;
	fbTonSerialStream: TON;
	bJoystickTimeoutReset: BOOL;
	fbTONSend: TON;
	sTempSendString: STRING;
	fbR_Trig: R_TRIG;
	fbTONResend: TON;
	sScreenDrawTemp: STRING;
	arrStringDraw: ARRAY[1..20] OF STRING;
	arrStringDrawCnt: INT;
	nScreenDrawnMult: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbTOFDevOn(IN:= fbEL600x.bStringReceived, PT:= T#1S);
GVL_Serial.bDeviceOn := INT_TO_BOOL(STRING_TO_INT(F_ToCHR(sMyString[1]))) AND fbTOFDevOn.Q;

//////////////////////////////////////////////////////
//Disable all Wireless Inputs when GVL_PLC.bLocalKeySwitchInput is FALSE
//////////////////////////////////////////////////////
IF GVL_PLC.bLocalKeySwitchInput THEN
	sMyString := fbEL600x.sLastReceivedString;
ELSE
	sMyString := '';
END_IF
//////////////////////////////////////////////////////

unStringSize := SIZEOF(sMyString);

IF P_JoystickSetup.bTurnOffJoystickSend OR GVL_PLC.bWiredJoystickEn THEN
	sMyStringSend := P_JoystickSetup.sSendString;
	GVL_Serial.bEstop := FALSE;
	GVL_Serial.bDeviceOn := FALSE;
ELSE
	IF fbEL600x.nStringLength = 36 AND unStringSize = 81 THEN
	//V10502v H10508h ZFz DFd EFe CFc J0002j
		//Vertical Signal
		IF F_ToCHR(sMyString[0]) = 'V' AND F_ToCHR(sMyString[6]) = 'v' THEN
			sStringDecipher := LEFT(sMyString,6);
			sStringDecipher := RIGHT(sStringDecipher,4);
			GVL_Serial.nVertical := STRING_TO_INT(sStringDecipher);
		END_IF
		
		//Horizontal Signal
		IF F_ToCHR(sMyString[7]) = 'H' AND F_ToCHR(sMyString[13]) = 'h' THEN
			sStringDecipher := LEFT(sMyString,13);
			sStringDecipher := RIGHT(sStringDecipher,4);
			GVL_Serial.nHorizontal := STRING_TO_INT(sStringDecipher);
		END_IF
		
		//Zon Signal
		IF F_ToCHR(sMyString[14]) = 'Z' AND F_ToCHR(sMyString[16]) = 'z' THEN
			sStringDecipher := LEFT(sMyString,16);
			sStringDecipher := RIGHT(sStringDecipher,1);
			GVL_Serial.bZonRaw := sStringDecipher = 'N';
		END_IF
		fbTONZon(IN:=GVL_Serial.bZonRaw,PT:=T#100MS);
		GVL_Serial.bZon := fbTONZon.Q;
		
		//Deadman Signal
		IF F_ToCHR(sMyString[17]) = 'D' AND F_ToCHR(sMyString[19]) = 'd' THEN
			sStringDecipher := LEFT(sMyString,19);
			sStringDecipher := RIGHT(sStringDecipher,1);
			GVL_Serial.bDeadmanRaw := sStringDecipher = 'N';
		END_IF
		fbTON(IN:=GVL_Serial.bDeadmanRaw,PT:=T#200MS);
		GVL_Serial.bDeadman := fbTON.Q;
		
		//Estop Signal
		IF F_ToCHR(sMyString[20]) = 'E' AND F_ToCHR(sMyString[22]) = 'e' THEN
			sStringDecipher := LEFT(sMyString,22);
			sStringDecipher := RIGHT(sStringDecipher,1);
			GVL_Serial.bEstop := sStringDecipher = 'F';
		END_IF
		//fbTOF(IN:=INT_TO_BOOL(STRING_TO_INT(MID(sMyString,1,23))),PT:=T#500MS);
		//GVL_Serial.bEstop := fbTOF.Q;
		
		//Heartbeat Count Signal
		IF F_ToCHR(sMyString[23]) = 'C' AND F_ToCHR(sMyString[25]) = 'c' THEN
			sStringDecipher := LEFT(sMyString,25);
			sStringDecipher := RIGHT(sStringDecipher,1);
			GVL_Serial.bCount := sStringDecipher = 'N';
		END_IF
		

		//Joystick Number
		IF F_ToCHR(sMyString[26]) = 'J' AND F_ToCHR(sMyString[31]) = 'j' THEN
			sStringDecipher := LEFT(sMyString,31);
			sStringDecipher := RIGHT(sStringDecipher,4);
			GVL_HMI.unJoystickCurrentNum := STRING_TO_UINT(sStringDecipher);
		END_IF
		
				//Joystick Screen Last Drawn
		IF F_ToCHR(sMyString[32]) = 'S' AND F_ToCHR(sMyString[34]) = 's' THEN
			sStringDecipher := LEFT(sMyString,34);
			sStringDecipher := RIGHT(sStringDecipher,1);
			GVL_Serial.sScreenDrawn := sStringDecipher;
			FOR nScreenDrawnMult := 2 TO 4 DO
				GVL_Serial.sScreenDrawn := CONCAT(GVL_Serial.sScreenDrawn, sStringDecipher);
			END_FOR
		END_IF
		
		//////////////////////////////////////////////////////////
		//OLED Screen
		/////////////////////////////////////////////////////////
		sMyStringSend := GVL_Serial.sJoystickScreen;
(*	IF GVL_Serial.bDeadmanRaw THEN
		sMyStringSend := 'FFFF';
	ELSE
		sMyStringSend := 'EEEE';
	END_IF
*)
		IF sMyStringSend <> sTempSendString THEN
			GVL_Serial.bSendJoystickModeEn := TRUE;
		END_IF
	END_IF
END_IF


//////////////////////////////////////////////////////////
//Serial Send Logic
/////////////////////////////////////////////////////////
fbTONSend(IN:= GVL_Serial.bSendJoystickModeEn, PT:= T#275MS);
//Send Last OLED Status change for 350MS before sending Sensor and Deadman Update
IF fbTONSend.Q THEN
	GVL_Serial.bSendJoystickModeEn := FALSE;
	sTempSendString := sMyStringSend;
END_IF

fbTONResend(IN:= GVL_Serial.bDeviceOn AND NOT GVL_Serial.bSendJoystickModeEn, PT:= T#500MS);
IF fbTONResend.Q THEN
	GVL_Serial.bSendJoystickModeEn := TRUE;
END_IF

fbEL600x(
//	bEnable := GVL_Serial.bDeviceOn OR P_JoystickSetup.bSendEn OR btest,
//	bEnable := P_JoystickSetup.bSendEn OR btest,
	bEnable := (GVL_Serial.bSendJoystickModeEn OR P_JoystickSetup.bSendEn OR btest) AND GVL_PLC.bLocalKeySwitchInput,
	sSendString := sMyStringSend,
	TxBuffer:= GVL_Serial.TxBufferEL,
	RxBuffer:= GVL_Serial.RxBufferEL);



//////////////////////////////////////////////////////////
//Serial Receive List
/////////////////////////////////////////////////////////	
IF fbEL600x.bStringReceived THEN
	FOR i:=1 TO 19 DO
		sSerialStringList[21-i] := sSerialStringList[20-i];
	END_FOR
	sSerialStringList[1] := fbEL600x.sReceivedString;
END_IF




//////////////////////////////////////////////////////////
//Serial Connection Timeout
/////////////////////////////////////////////////////////
//fbTonSerialStream(IN:= NOT fbEL600x.bStringReceived); //AND NOT fbTonSerialStream.Q, PT := T#5S);
fbTonSerialStream(IN:= NOT fbEL600x.bStringReceived AND NOT fbTonSerialStream.Q, PT := T#2S);
IF fbTonSerialStream.Q AND NOT (sSerialStringList[1] = 'TIMEOUT') THEN
	FOR i:=1 TO 19 DO
		sSerialStringList[21-i] := sSerialStringList[20-i];
	END_FOR
	sSerialStringList[1] := 'TIMEOUT';	
END_IF

//bJoystickTimeoutReset := GVL_PLC.unLastJoystick <> GVL_HMI.unJoystickCurrentNum;

fbTONHeartbeatON(IN:= GVL_Serial.bCount AND NOT bJoystickTimeoutReset, PT:= T#2000MS);
fbTONHeartbeatOFF(IN:= NOT GVL_Serial.bCount AND NOT bJoystickTimeoutReset, PT:= T#2000MS);
IF fbTONHeartbeatON.Q OR fbTONHeartbeatOFF.Q THEN
	GVL_Serial.bCommLoss := TRUE;
	GVL_Serial.bEstop := FALSE;
END_IF

//IF bJoystickTimeoutReset or
IF GVL_HMI.bGlobalReset THEN
	GVL_Serial.bCommLoss := FALSE;
END_IF

IF GVL_Serial.sScreenDrawn <> sScreenDrawTemp THEN
	FOR arrStringDrawCnt:=1 TO 19 DO
		arrStringDraw[21-arrStringDrawCnt] := arrStringDraw[20-arrStringDrawCnt];
	END_FOR
	arrStringDraw[1] := GVL_Serial.sScreenDrawn;
	sScreenDrawTemp := GVL_Serial.sScreenDrawn;	
END_IF]]></ST>
    </Implementation>
    <LineIds Name="P_SerialRemote">
      <LineId Id="3" Count="75" />
      <LineId Id="418" Count="3" />
      <LineId Id="425" Count="0" />
      <LineId Id="530" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="531" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="83" Count="2" />
      <LineId Id="225" Count="0" />
      <LineId Id="520" Count="0" />
      <LineId Id="522" Count="4" />
      <LineId Id="234" Count="0" />
      <LineId Id="236" Count="1" />
      <LineId Id="103" Count="1" />
      <LineId Id="288" Count="4" />
      <LineId Id="239" Count="0" />
      <LineId Id="312" Count="0" />
      <LineId Id="240" Count="3" />
      <LineId Id="431" Count="1" />
      <LineId Id="434" Count="2" />
      <LineId Id="105" Count="2" />
      <LineId Id="346" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="108" Count="3" />
      <LineId Id="307" Count="4" />
      <LineId Id="112" Count="6" />
      <LineId Id="301" Count="0" />
      <LineId Id="305" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="299" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="120" Count="16" />
      <LineId Id="382" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="471" Count="2" />
      <LineId Id="477" Count="2" />
      <LineId Id="481" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>